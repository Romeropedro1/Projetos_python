

```markdown
# üìä **Previs√£o de Score de Cr√©dito com Intelig√™ncia Artificial**

Este projeto utiliza t√©cnicas de Intelig√™ncia Artificial (IA) para prever o **score de cr√©dito** de clientes com base em suas informa√ß√µes. Abaixo est√° a explica√ß√£o do fluxo de trabalho e as etapas do c√≥digo que realizam o processamento e treinamento de um modelo de IA para fazer essa previs√£o.

---

## üöÄ **Objetivo do Projeto**

O objetivo deste projeto √© treinar um modelo de IA para prever o score de cr√©dito de novos clientes, baseado nas seguintes etapas:

1. **Importa√ß√£o e Prepara√ß√£o da Base de Dados**;
2. **Tratamento e Codifica√ß√£o de Dados**;
3. **Treinamento do Modelo de IA**;
4. **Avalia√ß√£o do Modelo e Escolha do Melhor Modelo**;
5. **Previs√£o para Novos Clientes**.

---

## üßë‚Äçüíª **C√≥digo**

### **1. Importa√ß√£o da Base de Dados**

Primeiro, importamos a base de dados e visualizamos os dados.

```python
import pandas as pd

Tabela = pd.read_csv("Aula03 - clientes.csv")  # L√™ o arquivo CSV com os dados dos clientes
print(Tabela)  # Exibe os dados importados
```

---

### **2. Prepara√ß√£o da Base de Dados**

O pr√≥ximo passo √© preparar a base de dados, tratando as colunas e removendo dados irrelevantes.

```python
# Exibe informa√ß√µes sobre os dados
print(Tabela.info())

# Remove a coluna "id_cliente" que n√£o ser√° usada no treinamento
Tabela = Tabela.drop(columns="id_cliente")

# Exibe a base de dados ap√≥s a remo√ß√£o da coluna
print(Tabela.info())
```

Agora, transformamos colunas do tipo **object (texto)** em n√∫meros utilizando o **LabelEncoder** para tornar os dados compat√≠veis com o treinamento da IA.

```python
import sklearn as sk
from sklearn.preprocessing import LabelEncoder as LE

# Codificadores para as colunas de texto
codificador_profissao = LE()
codificador_mixcredito = LE()
codificador_pagamento = LE()

# Codifica as colunas de texto em n√∫meros
Tabela["profissao"] = codificador_profissao.fit_transform(Tabela["profissao"])
Tabela["mix_credito"] = codificador_mixcredito.fit_transform(Tabela["mix_credito"])
Tabela["comportamento_pagamento"] = codificador_pagamento.fit_transform(Tabela["comportamento_pagamento"])

# Exibe as informa√ß√µes da base de dados ap√≥s a transforma√ß√£o
print(Tabela.info())
```

---

### **3. Separa√ß√£o dos Dados em Treinamento e Teste**

Agora que a base est√° preparada, separamos os dados em duas partes: **treinamento** e **teste**. O objetivo √© treinar o modelo com uma parte dos dados e validar a previs√£o com a outra.

```python
# Vari√°vel Y (coluna que queremos prever)
Y = Tabela["score_credito"]

# Vari√°vel X (colunas utilizadas para fazer a previs√£o)
X = Tabela.drop(columns="score_credito")

# Separar os dados em treino e teste
from sklearn.model_selection import train_test_split

X_treino, X_teste, Y_treino, Y_teste = train_test_split(X, Y, test_size=0.28)

# Exibe as divis√µes para treino e teste
print(X_treino, X_teste, Y_treino, Y_teste)
```

---

### **4. Treinamento do Modelo de IA**

Agora, treinamos dois modelos de IA para prever o score de cr√©dito. Vamos usar o **RandomForestClassifier** e o **KNeighborsClassifier**.

```python
from sklearn.ensemble import RandomForestClassifier
from sklearn.neighbors import KNeighborsClassifier

# Inicializa os modelos de IA
modelo_arvoredecisao = RandomForestClassifier()
modelo_knn = KNeighborsClassifier()

# Treina os modelos
modelo_arvoredecisao.fit(X_treino, Y_treino)
modelo_knn.fit(X_treino, Y_treino)
```

---

### **5. Avalia√ß√£o do Modelo**

Agora, testamos a acur√°cia dos modelos treinados para escolher o melhor. A acur√°cia √© a medida de como o modelo est√° fazendo previs√µes corretas.

```python
from sklearn.metrics import accuracy_score

# Previs√µes dos modelos
previsao_arvoredecisao = modelo_arvoredecisao.predict(X_teste)
previsao_knn = modelo_knn.predict(X_teste)

# Avalia a acur√°cia dos modelos
print("Acur√°cia do RandomForestClassifier:", accuracy_score(Y_teste, previsao_arvoredecisao))
print("Acur√°cia do KNeighborsClassifier:", accuracy_score(Y_teste, previsao_knn))
```

---

### **6. Previs√£o para Novos Clientes**

Por fim, usamos o modelo treinado para prever o score de cr√©dito de **novos clientes**. A base de dados dos novos clientes √© processada da mesma forma que os dados de treinamento, e depois a previs√£o √© feita.

```python
# Importar dados dos novos clientes
Tabela_novos_clientes = pd.read_csv("Aula03 - novos_clientes.csv")
print(Tabela_novos_clientes)

# Codifica as colunas de texto dos novos clientes
Tabela_novos_clientes["profissao"] = codificador_profissao.transform(Tabela_novos_clientes["profissao"])
Tabela_novos_clientes["mix_credito"] = codificador_mixcredito.transform(Tabela_novos_clientes["mix_credito"])
Tabela_novos_clientes["comportamento_pagamento"] = codificador_pagamento.transform(Tabela_novos_clientes["comportamento_pagamento"])

# Exibe os dados codificados dos novos clientes
print(Tabela_novos_clientes)

# Prever o score de cr√©dito dos novos clientes
nova_previsao = modelo_arvoredecisao.predict(Tabela_novos_clientes)
print("Previs√£o do score de cr√©dito dos novos clientes:", nova_previsao)
```

---

## ‚öôÔ∏è **Requisitos**

Para rodar este projeto, voc√™ precisar√° das seguintes bibliotecas Python:

- **pandas**: Para manipula√ß√£o de dados.
- **scikit-learn**: Para criar e treinar os modelos de IA.

### Para instalar as depend√™ncias, execute:

```bash
pip install pandas scikit-learn
```

---

## üèÅ **Como Rodar o Projeto**

1. Clone este reposit√≥rio para sua m√°quina local:

```bash
git clone https://github.com/seu_usuario/IA_Score_Credito.git
```

2. Navegue at√© o diret√≥rio do projeto:

```bash
cd IA_Score_Credito
```

3. Execute o script Python:

```bash
python seu_script.py
```

---

## ü§ù **Contribui√ß√µes**

Se voc√™ deseja contribuir para este projeto, fa√ßa um fork deste reposit√≥rio, realize suas modifica√ß√µes e envie um pull request.

---

## üìú **Licen√ßa**

Este projeto est√° licenciado sob a Licen√ßa MIT. Consulte o arquivo [LICENSE](LICENSE) para mais detalhes.

---

**üöÄ** **Agradecemos pela sua contribui√ß√£o e participa√ß√£o!** üòä
```



